## Gaussiaun blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
plt.clf()
plt.imshow(line_image)
plt.show()
return(list_of_lengths, list_of_cropped_images)
lengths, cropped_Imgs = getLineLength(paths)
def combined_lines(lines, min_len=200):
def combined_lines(lines, min_len=0):
combined = []
used = []
for i, line in enumerate(lines):
if i not in used:
curr = line
for j in range(i + 1, len(lines)):
if j not in used:
if abs(line[0][1] - lines[j][0][1]) < 10 and abs(line[-1][1] - lines[j][-1][1]) < 10:
curr = curr + [(x[0] + line[-1][0] + x[1], x[2]) for x in lines[j]]
used.append(j)
if len(curr) >= min_len:
combined.append(curr)
unused = [line for i, line in enumerate(lines) if i not in used]
return combined + unused
combined_lines(b)
def merge_lines(lines, threshold):
def merge_lines(lines, threshold):
def merge_lines(lines, threshold):
def merge_lines(lines, threshold):
def merge_lines(lines, threshold):
merged_lines = []
unused_lines = []
for i in range(len(lines)):
for j in range(i+1, len(lines)):
rho_i, theta_i = lines[i][0]
rho_j, theta_j = lines[j][0]
if abs(theta_i - theta_j) > threshold:
continue
a = np.cos(theta_i)
b = np.sin(theta_i)
x0 = a*rho_i
y0 = b*rho_i
pt1_i = (int(x0 + 1000*(-b)), int(y0 + 1000*(a)))
pt2_i = (int(x0 - 1000*(-b)), int(y0 - 1000*(a)))
a = np.cos(theta_j)
b = np.sin(theta_j)
x0 = a*rho_j
y0 = b*rho_j
pt1_j = (int(x0 + 1000*(-b)), int(y0 + 1000*(a)))
pt2_j = (int(x0 - 1000*(-b)), int(y0 - 1000*(a)))
dist = cv2.norm(np.array(pt1_i) - np.array(pt2_j))
if dist < 50:
merged_lines.append(np.concatenate((lines[i], lines[j]), axis=1))
lines[j] = np.array([[0,0,0,0]])
break
if not np.array_equal(lines[i], np.array([[0,0,0,0]])):
unused_lines.append(lines[i])
unused_lines += [line for line in lines if not np.array_equal(line, np.array([[0,0,0,0]]))]
return [merged_lines, unused_lines]
merge_lines(b,1)
merged_lines, unused_lines = merge_lines(b,1)
a = combine_lines(b)
def combine_lines(line_input, min_line_length=200):
# initialize dictionary to store lines by y2 coordinate
line_dict = {}
# iterate over each line
for line in line_input:
# get y2 coordinate of line
y2 = line[0][3]
# if y2 already exists in dictionary, combine with existing line
if y2 in line_dict:
existing_line = line_dict[y2]
xmin = min(line[0][0], existing_line[0])
xmax = max(line[0][2], existing_line[2])
line_dict[y2] = [xmin, y2, xmax, y2]
# otherwise, add line to dictionary
else:
line_dict[y2] = line[0]
# filter out lines shorter than min_line_length pixels
combined_lines = [line for line in line_dict.values() if (line[2] - line[0]) >= min_line_length]
# sort lines by y2 coordinate
combined_lines.sort(key=lambda x: x[1])
# merge lines that are within min_line_length pixels of each other into one line
merged_lines = []
current_line = combined_lines[0]
for line in combined_lines[1:]:
if line[0] - current_line[2] <= min_line_length:
current_line[2] = line[2]
else:
merged_lines.append(current_line)
current_line = line
merged_lines.append(current_line)
# convert merged lines to array
merged_lines_arr = np.array(merged_lines, dtype=np.int32)
return merged_lines_arr
lengths, cropped_Imgs = getLineLength(paths)
def combine_lines(line_input, min_line_length=25):
# initialize dictionary to store lines by y2 coordinate
line_dict = {}
# iterate over each line
for line in line_input:
# get y2 coordinate of line
y2 = line[0][3]
# if y2 already exists in dictionary, combine with existing line
if y2 in line_dict:
existing_line = line_dict[y2]
xmin = min(line[0][0], existing_line[0])
xmax = max(line[0][2], existing_line[2])
line_dict[y2] = [xmin, y2, xmax, y2]
# otherwise, add line to dictionary
else:
line_dict[y2] = line[0]
# filter out lines shorter than min_line_length pixels
combined_lines = [line for line in line_dict.values() if (line[2] - line[0]) >= min_line_length]
# sort lines by y2 coordinate
combined_lines.sort(key=lambda x: x[1])
# merge lines that are within min_line_length pixels of each other into one line
merged_lines = []
current_line = combined_lines[0]
for line in combined_lines[1:]:
if line[0] - current_line[2] <= min_line_length:
current_line[2] = line[2]
else:
merged_lines.append(current_line)
current_line = line
merged_lines.append(current_line)
# create a set of y2 coordinates used for merged lines
used_y2 = set([line[3] for line in merged_lines])
# get unused lines by comparing all y2 coordinates with used_y2
unused_lines = [line[0] for line in line_input if line[0][3] not in used_y2]
# combine merged lines and unused lines into one list
output_lines = merged_lines + unused_lines
# convert output_lines to array
output_lines_arr = np.array(output_lines, dtype=np.int32)
return output_lines_arr
def getLineLength(Image_names):
## Gaussiaun blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
plt.clf()
plt.imshow(line_image)
plt.show()
return(list_of_lengths, list_of_cropped_images)
lengths, cropped_Imgs = getLineLength(paths)
def combine_lines(line_input, min_line_length=25):
# initialize dictionary to store lines by y2 coordinate
line_dict = {}
# iterate over each line
for line in line_input:
# get y2 coordinate of line
y2 = line[0][3]
# if y2 already exists in dictionary, combine with existing line
if y2 in line_dict:
existing_line = line_dict[y2]
xmin = min(line[0][0], existing_line[0])
xmax = max(line[0][2], existing_line[2])
line_dict[y2] = [xmin, y2, xmax, y2]
# otherwise, add line to dictionary
else:
line_dict[y2] = line[0]
# filter out lines shorter than min_line_length pixels
combined_lines = [line for line in line_dict.values() if (line[2] - line[0]) >= min_line_length]
# sort lines by y2 coordinate
combined_lines.sort(key=lambda x: x[1])
# merge lines that are within 5 pixels of each other into one line
merged_lines = []
current_line = combined_lines[0]
for line in combined_lines[1:]:
if line[1] - current_line[3] <= 5:
current_line[2] = max(line[2], current_line[2])
current_line[3] = line[3]
else:
merged_lines.append(current_line)
current_line = line
merged_lines.append(current_line)
# convert merged lines to array
merged_lines_arr = np.array(merged_lines, dtype=np.int32)
# get list of unused lines
unused_lines = [line for line in line_input if line[0][3] not in line_dict]
# combine merged lines and unused lines into one list
combined_list = merged_lines + [line[0] for line in unused_lines]
return combined_list
lengths, cropped_Imgs = getLineLength(paths)
def combine_lines(line_input, min_line_length=25):
# initialize dictionary to store lines by y2 coordinate
line_dict = {}
# iterate over each line
for line in line_input:
# get y2 coordinate of line
y2 = line[0][3]
# if y2 already exists in dictionary, combine with existing line
if y2 in line_dict:
existing_line = line_dict[y2]
xmin = min(line[0][0], existing_line[0])
xmax = max(line[0][2], existing_line[2])
line_dict[y2] = [xmin, y2, xmax, y2]
# otherwise, add line to dictionary
else:
line_dict[y2] = line[0]
# filter out lines shorter than min_line_length pixels
combined_lines = [line for line in line_dict.values() if (line[2] - line[0]) >= min_line_length]
# sort lines by y2 coordinate
combined_lines.sort(key=lambda x: x[1])
# merge lines that are within 2 pixels of each other into one line
merged_lines = []
current_line = combined_lines[0]
for line in combined_lines[1:]:
if line[1] - current_line[3] <= 2:
current_line[2] = max(current_line[2], line[2])
current_line[3] = line[3]
else:
merged_lines.append(current_line)
current_line = line
merged_lines.append(current_line)
# convert merged lines to array
merged_lines_arr = np.array(merged_lines, dtype=np.int32)
# extract unused lines
unused_lines = [line for line in line_input if line[0][3] not in line_dict]
# convert unused lines to array
unused_lines_arr = np.array([line[0] for line in unused_lines], dtype=np.int32)
# combine merged and unused lines into one array
result = np.concatenate((merged_lines_arr, unused_lines_arr), axis=0)
return result
lengths, cropped_Imgs = getLineLength(paths)
def getLineLength(Image_names):
## Gaussiaun blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
plt.clf()
plt.imshow(line_image)
plt.show()
return(list_of_lengths, list_of_cropped_images)
lengths, cropped_Imgs = getLineLength(paths)
def getLineLength(Image_names):
## Gaussiaun blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
plt.clf()
plt.imshow(line_image)
plt.show()
list_of_cropped_images(cropped_image)
return(list_of_lengths, list_of_cropped_images)
lengths, cropped_Imgs = getLineLength(paths)
def getLineLength(Image_names):
## Gaussian blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines, min_line_length=2, max_line_gap=5)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
list_of_cropped_images.append(cropped_image)
plt.clf()
plt.imshow(line_image)
plt.show()
return list_of_lengths, list_of_cropped_images
lengths, cropped_Imgs = getLineLength(paths)
def getLineLength(Image_names):
## Gaussian blur and image read ##
###################################
import cv2 as cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
list_of_lengths = []
list_of_cropped_images = []
for x in range(len(Image_names)):
img = cv2.imread(Image_names[x])
height = img.shape[0]
width = img.shape[1]
cropped_image = img[int(height*(3/4)):height,int(width*(3/4)):width]
gray = cv2.cvtColor(cropped_image,cv2.COLOR_BGR2GRAY)
gray[gray < 200] = 0
gray = cv2.bitwise_not(gray)
# Define the kernel size for the Y-axis blur
kernel_size = (17, 1)  # (width, height)
# Apply the Y-axis Gaussian blur
blurred_image = cv2.GaussianBlur(gray, kernel_size, sigmaX=0, sigmaY=0)
edges = cv2.Canny(blurred_image, 1000, 1000,1,apertureSize=3)
rho = 3 # distance resolution in pixels of the Hough grid
theta = np.pi / 180  # angular resolution in radians of the Hough grid
threshold = 10  # minimum number of votes (intersections in Hough grid cell)
min_line_length = 200 # minimum number of pixels making up a line
max_line_gap = 0  # maximum gap in pixels between connectable line segments
line_image = np.copy(cropped_image) * 0  # creating a blank to draw lines on
# Run Hough on edge detected image
# Output "lines" is an array containing endpoints of detected line segments
lines = cv2.HoughLinesP(edges, rho, theta, threshold,min_line_length, max_line_gap)
if lines is None:
list_of_lengths.append(0)
else:
combined = combine_lines(lines, min_line_length=2)
for line in combined:
x1, y1, x2, y2 = line
cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 1)
Summe = np.sum(line_image[:,:,0], axis=1)
SumNoZeros = Summe[Summe != 0]
PixelPerUnit = SumNoZeros.min()/255
list_of_lengths.append(PixelPerUnit)
list_of_cropped_images.append(cropped_image)
plt.clf()
plt.imshow(line_image)
plt.show()
return list_of_lengths, list_of_cropped_images
lengths, cropped_Imgs = getLineLength(paths)
import os
import subprocess
os.chdir('/home/philipp/GitRStudioServer/Workflow_code/')
from TifzuJPEG.py import ConvertTiftoJPEG
from TifzuJPEG.py import ConvertTiftoJPEG
from Yaml_load_test.py import ConfigImport
os.chdir('/home/philipp/Grouped_Code/CopyOfWorkflow_code/')
from TifzuJPEG.py import ConvertTiftoJPEG
Images_folder = "~/RotatedImages_Folder/"
output_folder = "~/SubprocessTest/"
subprocess.run('conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
subprocess.run('source activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
subprocess.run('/home/user/miniconda3/bin/conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
subprocess.run('/home/philipp/miniconda3/bin/conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
subprocess.run('/home/philipp/miniconda3/bin/conda activate ginjinn')
subprocess.run(f'conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
subprocess.run(f'conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
conda init --help
import subprocess
subprocess.run(f'conda activate ginjinn && ginjinn predict OnlyEyes -i ' + Images_folder + ' -o ' + output_folder +  ' -c -v && conda deactivate', shell=True)
reticulate::repl_python()
